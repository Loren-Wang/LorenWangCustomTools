apply plugin: 'com.android.library'
//必须引入这几个插件
apply plugin: 'maven'
apply plugin: 'signing'



android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "3.1.3"
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        appTest {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compileOnly 'org.jetbrains:annotations:19.0.0'
    compileOnly 'androidx.appcompat:appcompat:1.2.0'
    compileOnly 'androidx.constraintlayout:constraintlayout:2.0.4'
    compileOnly 'androidx.recyclerview:recyclerview:1.1.0'
    //官方变色库
    compileOnly 'com.readystatesoftware.systembartint:systembartint:1.0.3'
    //fresco图片加载
    compileOnly 'com.facebook.fresco:fresco:2.0.0'
    compileOnly 'com.facebook.fresco:animated-gif:2.0.0'
    //glide图片加载
    compileOnly 'com.github.bumptech.glide:glide:4.10.0'
    //Picasso图片加载
    compileOnly 'com.squareup.picasso:picasso:2.71828'
    //imageLoad加载库
    compileOnly 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    // 高斯模糊工具类
    compileOnly 'net.qiujuer.genius:graphics:2.1.1'
    //高德定位库
    compileOnly 'com.amap.api:location:latest.integration'
    //java工具类库
    compileOnly project(':JavaCustomToolsFromLorenWang')
}
def moduleName = 'AndroidCustomToolsFromLorenWang'
def moduleDescription = "Android自定义工具库"
def moduleVersion = android.defaultConfig.versionName
// 编译版本和编码配置
repositories {
    mavenCentral()
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
        title moduleName
    }
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
//上传
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatype_account, password: sonatype_password)
            }

            pom.project {
                name moduleName
                version moduleVersion
                groupId project_groupId
                description moduleDescription
                packaging 'jar'
                // optionally artifactId can be defined here
                description moduleDescription
                url project_webSiteUrl
                scm {
                    connection project_gitUrl // Git仓库地址。
                    developerConnection project_gitUrl // Git仓库地址。
                    url project_webSiteUrl // 项目主页。
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = userInfo_userId
                        name = userInfo_userName
                        email = userInfo_userEmail
                    }
                }
            }
        }
    }
}
//签名配置
signing {
    sign configurations.archives
}
