plugins {
    id 'java'
    id 'com.jfrog.bintray'
    id 'com.github.dcendents.android-maven'
}
apply plugin: 'kotlin'
sourceSets {
    main {
        java.srcDirs = ['src']
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
//    maven { setUrl("https://dl.bintray.com/lorenwang/maven") }
}

dependencies {
    //基础包
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.springframework:spring-webmvc:5.1.9.RELEASE")
    implementation("org.apache.tomcat.embed:tomcat-embed-core:9.0.30")

    // JPA Data (We are going to use Repositories, Entities, Hibernate, etc...)
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:2.1.5.RELEASE")

    //swagger注释
    implementation("io.springfox:springfox-swagger2:2.6.0")
    implementation("io.springfox:springfox-swagger-ui:2.6.0")

    //用户安全加密相关
    implementation("org.springframework.security:spring-security-core:3.2.9.RELEASE")

    //java工具类库
    implementation 'com.github.lorenwang:JavaCustomToolsFromLorenWang:1.0.5'
    //java数据格式化类库
    implementation 'com.github.lorenwang:JavaDataParseFromLorenWang:1.0.11'
    //kotlin工具类
    implementation 'com.github.lorenwang:KotlinCustomToolsFromLorenWang:1.0.5'

    //邮件服务
    compileOnly("org.springframework:spring-context-support:4.3.4.RELEASE")
    compileOnly("javax.mail:mail:1.4.7")
    //阿里云oss存储服务
    compileOnly("com.aliyun.oss:aliyun-sdk-oss:2.5.0")
    compileOnly("commons-fileupload:commons-fileupload:1.3.1")

//    //可以使用外置tomcat的配置
//    apply plugin: 'war'
//    //内置的tomcat设置为provided
//    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    //通过bootRun启动而不是run application
//    runtime("org.springframework.boot:spring-boot-devtools")
}


def moduleName = "SpringBootCommonBaseFrameLibraryFromLorenWang"
def moduleDescription = "SpringBoot通用基础框架包"
version '1.1.03'
Properties properties = new Properties();
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def bintrayUser = properties.getProperty("bintray.user")
def bintrayKey = properties.getProperty("bintray.apikey")
def bintrayGpgPwd = properties.getProperty("bintray.gpg.password")
def userId = properties.getProperty("userinfo.userId")
def userName = properties.getProperty("userinfo.userName")
def userEmail = properties.getProperty("userinfo.userEmail")
def projectGitUrl = properties.getProperty("project.gitUrl")
def projectWebsiteUrl = properties.getProperty("project.webSiteUrl")
def projectGroupId = properties.getProperty("project.groupId")
def moduleVersion = version

install {
    repositories.mavenInstaller {
        // 生成pom.xml和参数
        pom {
            project {
                packaging 'aar'
                // 项目描述，复制我的话，这里需要修改。
                name moduleName// 可选，项目名称。
                description moduleDescription// 可选，项目描述。
                url projectWebsiteUrl // 项目主页，这里是引用上面定义好。

                // 软件开源协议，现在一般都是Apache License2.0吧，复制我的，这里不需要修改。
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                //填写开发者基本信息，复制我的，这里需要修改。
                developers {
                    developer {
                        id userId// 开发者的id。
                        name userName // 开发者名字。
                        email userEmail // 开发者邮箱。
                    }
                }

                // SCM，复制我的，这里不需要修改。
                scm {
                    connection projectGitUrl // Git仓库地址。
                    developerConnection projectGitUrl // Git仓库地址。
                    url projectWebsiteUrl // 项目主页。
                }
                dependencies {
                    dependency {
                        groupId projectGroupId
                        version moduleVersion
                        artifactId moduleName
                    }
                }
            }
        }
    }
}
task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
        title moduleName
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


bintray {
    user = bintrayUser
    key = bintrayKey
    configurations = ['archives']
    group = projectGroupId
    version = moduleVersion

    pkg {
        repo = "maven"
        name = moduleName
        websiteUrl = projectWebsiteUrl
        vcsUrl = projectGitUrl
        licenses = ["Apache-2.0"]
        publish = true
        version {
            gpg {
                sign = true
                passphrase = bintrayGpgPwd
            }
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
